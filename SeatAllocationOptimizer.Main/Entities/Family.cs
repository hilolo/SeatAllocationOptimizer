// Necessary namespaces for handling collections and LINQ queries.
using System.Collections.Generic;
using System.Linq;

// Class representing a family, which is a group of passengers.
public class Family
{
    // Lists to store child and adult passengers separately.
    public List<Passenger> Children { get; set; }
    public List<Passenger> Adults { get; set; }

    // Private fields to track the largest and smallest adults based on seat requirements.
    private Passenger LargestAdult { get; set; }
    private Passenger SmallestAdult { get; set; }

    // Properties for maintaining seat and revenue details.
    public int TotalSeats { get; private set; }  // Total seats required by the family.
    public double AvgRevenue { get; private set; }  // Average revenue per seat.
    public int TotalRevenue { get; private set; }  // Total revenue generated by the family.

    // Family identifier.
    public string Key { get; set; }

    // Constructor initializes lists and sets initial values.
    public Family(string key)
    {
        Children = new List<Passenger>();
        Adults = new List<Passenger>();
        TotalSeats = 0;
        AvgRevenue = 0.0;
        TotalRevenue = 0;
        Key = key;
    }

    // Method to add a passenger to the family, updating seat and revenue totals.
    public void AddPassenger(Passenger passenger)
    {
        TotalSeats += passenger.Seats;  // Increase total seat count.

        // Check if the passenger is an adult to categorize and calculate revenue.
        if (passenger.IsAdult)
        {
            // Determine the largest and smallest adults for seat allocation purposes.
            if (LargestAdult == null || LargestAdult.Seats < passenger.Seats)
                LargestAdult = passenger;
            if (SmallestAdult == null || SmallestAdult.Seats > passenger.Seats)
                SmallestAdult = passenger;

            Adults.Add(passenger);  // Add to adults list.
            TotalRevenue += Passenger.GetAdultPrice() * passenger.Seats;  // Calculate revenue from adult price.
        }
        else
        {
            Children.Add(passenger);  // Add to children list.
            TotalRevenue += Passenger.GetChildPrice();  // Calculate revenue using child price.
        }

        // Update average revenue calculation.
        AvgRevenue = (double)TotalRevenue / TotalSeats;
    }

    // Method to check if the family has children.
    public bool HasChildren()
    {
        return Children.Any();
    }

    // Calculates the minimum number of seats needed based on the smallest adult and the number of children.
    public int GetMinSize()
    {
        // Conditional logic based on the family composition.
        return HasChildren() ? (Adults.Count == 1 ? Adults.First().Seats + Children.Count : SmallestAdult.Seats + 1) : SmallestAdult.Seats;
    }

    // Returns a string representation of the family using its identifier.
    public override string ToString()
    {
        return Key;
    }
}
